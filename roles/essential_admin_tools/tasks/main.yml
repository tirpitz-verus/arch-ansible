  - name: istall essential admin software
    pacman:
      name: "{{ item }}"
      state: present
    loop:
      - wget
      - vim
      - python-pip
      - ansible
      - git
      - screen
      - tree
      - htop
      - sudo
      - pacmatic
      - pacman-contrib
      - reflector
      - pacman-mirrorlist
      - zip
      - unzip
      - unrar
      - terminator
      # browsers
      - firefox
      - lynx
      - gnupg  
      - openssh
      # file manager
      - ranger
      # cmd spreadsheet
      - sc
      - zsh
      - zsh-completions
      # for zsh
      - python-pexpect


  # add multilib repo
  - name: enable multilib repository
    become: yes
    blockinfile:
      path: /etc/pacman.conf
      block: |
        # enable multilib
        [multilib]
        Include = /etc/pacman.d/mirrorlist

#
# setup group WHEEL
#
  - name: add wheel group
    group:
      name: wheel
      state: present
  - name: add group wheel to sudoers
    lineinfile:
      dest: /etc/sudoers
      state: present
      line: '%wheel ALL=(ALL) ALL'
      validate: 'visudo -cf %s'


  # allow users to update the system
  - name: create systemupdater group
    group:
      name: systemupdater
      state: present
  - name: allow systemupdaters to upgreade the system
    lineinfile:
      dest: /etc/sudoers
      state: present
      line: '%systemupdater ALL=(ALL) NOPASSWD: /usr/bin/pacmatic'
      validate: 'visudo -cf %s'


  # add userts to groups and set shell
  - name: setup users
    user:
      name: "{{ item }}"
      append: True
      groups: wheel, systemupdater
      shell: /bin/zsh
    loop: "{{ users_to_setup }}"
    when: item != 'root'


  # stuff for vim
  - name: install powerline
    pip:
      name: powerline-status
  - name: copy .vimrc for non-root
    copy:
      src: .vimrc
      dest: "/home/{{ item }}/.vimrc"
      owner: "{{ item }}"
      group: "{{ item }}"
    loop: "{{ users_to_setup }}"
    when: item != 'root'
  - name: copy .vimrc for root
    copy:
      src: .vimrc
      dest: "/.vimrc"


  # create bin dir for users
  - name: create directory for scripts
    file:
      path: "/home/{{ item }}/.local/bin"
      state: directory
      owner: "{{ item }}"
      group: "{{ item }}"
    loop: "{{ users_to_setup }}"
    when: item != 'root'

        
  # stop pacman cache bloat
  - name: create hooks directory
    file:
      path: /etc/pacman.d/hooks
      state: directory
  - name: run paccache post-upgreade
    copy:
      dest: /etc/pacman.d/hooks/run-paccache.hook
      content: |
        [Trigger]
        Operation = Remove
        Operation = Install
        Operation = Upgrade
        Type = Package
        Target = *
        [Action]
        Description = Keep the last cache and the currently installed.
        When = PostTransaction
        Exec = /usr/bin/paccache -rvk2


  # resfresh pacman mirrors automatically
  - name: create pacman hook for reflector
    copy:
      dest: /etc/pacman.d/hooks/run-reflector.hook
      content: |
        [Trigger]
        Operation = Upgrade
        Type = Package
        Target = pacman-mirrorlist
        [Action]
        Description = Updating pacman-mirrorlist with reflector and removing pacnew...
        When = PostTransaction
        Depends = reflector
        Exec = /bin/sh -c "reflector --age 24 --latest 50 --sort rate --save /etc/pacman.d/mirrorlist; rm -f /etc/pacman.d/mirrorlist.pacnew"


  # secure ssh
  - name: prevent root ssh login
    lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^#PermitRootLogin.*'
      line: PermitRootLogin no
  - name: prevent ssh password login
    lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^#PasswordAuthentication yes.*'
      line: PasswordAuthentication no
  - name: restart sshd
    systemd:
      name: sshd
      enabled: yes
      state: restarted

 
  - name: set journald size
    lineinfile:
      line: SystemMaxFiles=100
      path: /etc/systemd/journald.conf
      regexp: SystemMaxFiles
