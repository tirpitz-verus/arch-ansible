  - name: install essential admin software
    pacman:
      name: "{{ item }}"
      state: present
    loop:
      - wget
      - vim
      - vim-spell-en
      - vim-spell-pl
      # some tools use it by default
      - nano
      - python-pip
      - ansible
      - git
      - screen
      - tree
      - htop
      - sudo
      - pacman-contrib
      - reflector
      - pacman-mirrorlist
      - zip
      - unzip
      - unrar
      - terminator
      - python-configobj # terminator 1.9.2 forgot to add it as a package dep
      # browsers
      - firefox
      - gnupg  
      - openssh
      # file manager
      - ranger
      - w3m
      # cmd spreadsheet
      - sc
      - zsh
      - zsh-completions
      # for zsh
      - python-pexpect
      # to gen dns dig command
      - bind


  #
  # add multilib repo
  #
  - name: check if multilib enabled
    command: grep -Fxq "[multilib]" /etc/pacman.conf
    register: multilib_present
    check_mode: no
    changed_when: no
    ignore_errors: True
  - name: enable multilib repository
    blockinfile:
      path: /etc/pacman.conf
      marker: "# {mark} ANSIBLE MANAGED BLOCK enable multilib"
      block: |
        [multilib]
        Include = /etc/pacman.d/mirrorlist
    notify: "download pacman repos"
    when: multilib_present.rc == 1


  #
  # setup group WHEEL
  #
  - name: add wheel group
    group:
      name: wheel
      state: present
  - name: add group wheel to sudoers
    lineinfile:
      dest: /etc/sudoers
      state: present
      line: '%wheel ALL=(ALL:ALL) ALL'
      validate: 'visudo -cf %s'


  # allow users to update the system
  - name: create systemupdater group
    group:
      name: systemupdater
      state: present
  - name: allow systemupdaters to upgreade the system
    lineinfile:
      dest: /etc/sudoers
      state: present
      line: '%systemupdater ALL=(ALL:ALL) NOPASSWD: /usr/bin/pacmatic'
      validate: 'visudo -cf %s'


  #
  # add users to groups and set shell
  #
  - name: setup users
    user:
      name: "{{ item }}"
      append: True
      groups: wheel, systemupdater
      shell: /bin/zsh
    loop: "{{ users_to_setup }}"
    when: item != 'root'

  #
  # stuff for vim
  #
  - name: install vim-airline
    pacman:
      name: "{{ item }}"
      state: present
    loop:
      - vim-airline
      - vim-airline-themes
      - powerline-fonts
      # https://archlinux.org/groups/x86_64/vim-plugins/
  - name: copy .vimrc for non-root
    copy:
      src: .vimrc
      dest: "~{{ item }}/.vimrc"
      owner: "{{ item }}"
      group: "{{ item }}"
    loop: "{{ users_to_setup }}"

  #
  # create bin dir for users
  #
  - name: create directory for scripts
    file:
      path: "~{{ item }}/.local/bin"
      state: directory
      owner: "{{ item }}"
      group: "{{ item }}"
    loop: "{{ users_to_setup }}"

  #      
  # stop pacman cache bloat
  #
  - name: create hooks directory
    file:
      path: /etc/pacman.d/hooks
      state: directory
  - name: run paccache post-upgreade
    copy:
      dest: /etc/pacman.d/hooks/run-paccache.hook
      content: |
        [Trigger]
        Operation = Remove
        Operation = Install
        Operation = Upgrade
        Type = Package
        Target = *
        [Action]
        Description = Keep the last cache and the currently installed.
        When = PostTransaction
        Exec = /usr/bin/paccache -rvk2

  #
  # refresh pacman mirrors automatically
  #
  - name: create pacman hook for reflector
    copy:
      dest: /etc/pacman.d/hooks/run-reflector.hook
      content: |
        [Trigger]
        Operation = Upgrade
        Type = Package
        Target = pacman-mirrorlist
        [Action]
        Description = Updating pacman-mirrorlist with reflector and removing pacnew...
        When = PostTransaction
        Depends = reflector
        Exec = /bin/sh -c "reflector --age 24 --latest 50 --sort rate --save /etc/pacman.d/mirrorlist; rm -f /etc/pacman.d/mirrorlist.pacnew"

  #
  # secure ssh
  #
  - name: prevent root ssh login
    lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^#PermitRootLogin.*'
      line: PermitRootLogin no
    notify: "restart sshd"
  - name: prevent ssh password login
    lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^#PasswordAuthentication yes.*'
      line: PasswordAuthentication no
    notify: "restart sshd"

 
  - name: set journald size
    lineinfile:
      line: SystemMaxFiles=100
      path: /etc/systemd/journald.conf
      regexp: SystemMaxFiles

  #
  # setup oh-my-zsh
  #
  - name: clone oh-my-zsh for users
    tags:
      # Suppress warning: [ANSIBLE0006] git used in place of git module
      # Git module doesn't allow us to set `core.autocrlf=input`.
      - skip_ansible_lint
    become_user: '{{ item }}'
    # core.autocrlf=input prevents https://github.com/robbyrussell/oh-my-zsh/issues/4402
    command: 'git clone -c core.autocrlf=input --depth=1 https://github.com/robbyrussell/oh-my-zsh.git .oh-my-zsh'
    args:
      chdir: '~{{ item }}'
      creates: '~{{ item }}/.oh-my-zsh'
    loop: "{{ users_to_setup }}"
  - name: set permissions of oh-my-zsh for users
    file:
      path: '~{{ item }}/.oh-my-zsh'
      # Prevent the cloned repository from having insecure permissions. Failing to do
      # so causes compinit() calls to fail with "command not found: compdef" errors
      # for users with insecure umasks (e.g., "002", allowing group writability).
      mode: 'go-w'
      recurse: yes
    loop: "{{ users_to_setup }}"
  - name: write .zshrc for users
    become_user: '{{ item }}'
    template:
      src: zshrc.j2
      dest: '~{{ item }}/.zshrc'
      mode: 'u=rw,go=r'
    loop: "{{ users_to_setup }}"
  - name: make sure .profile for users adds .local/bin to PATH
    become_user: '{{ item }}'
    lineinfile:
      path: ~{{ item }}/.profile
      line: 'PATH=$HOME/.local/bin:$PATH'
      mode: 'u=rw,go=r'
      create: yes
    loop: "{{ users_to_setup }}"

