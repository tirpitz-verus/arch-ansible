# developer - sets up all the stuff needed for developing software
# requires 'developers' dict
# developers:
#   <username>:
#     email: <email address>

- assert:
    that: developers is defined
    msg: "'developers' dict needs to be defined"

- name: install dependencies for development
  pacman:
    name: "{{ item }}"
    state: present
  loop:
    - git
    - vim
    # Java current
    - jdk-openjdk
    - openjdk-doc
    - openjdk-src
    # gradle
    - gradle
    - gradle-doc
    - gradle-src
    # java 17
    - jdk17-openjdk
    - openjdk17-doc
    - openjdk17-src
    # java 21
    - jre21-openjdk
    - jdk21-openjdk
    - openjdk21-doc
    - openjdk21-src
    # maven
    - maven
    # docker
    - docker
    - docker-compose
    # javascript
    - nodejs
    - npm
    # C & C++
    - make
    - cmake
    - gcc
    # Vulkan
    - vulkan-devel

- name: install aur dependencies for development
  become_user: aur_builder
  aur:
    name:
      # IDE
      - jetbrains-toolbox


#
# groups
#
- name: create group groups
  group:
    name: "{{ item }}"
    state: present
  loop:
    # for common stuff like idea dir ownership
    - developers
    # to run docker without sudo
    - docker
- name: add users to groups
  user:
    name: "{{ item.key }}"
    groups: developers, docker
    append: yes
  loop: "{{ q('dict', developers) }}"


#
# start docker service
#
- name: start docker service
  systemd:
    name: docker
    state: started
    enabled: yes


#
# setup git
#
- name: setup git
  copy:
    dest: ~{{ item.key }}/.gitconfig
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
    mode: u=rw,g=rw,o=r
    content: |
      [user]
      email = "{{ item.value.email }}"
      name = "{{ item.value.fullname }}"
      [core]
      editor=vim
      [pull]
      ff=only
  loop: "{{ q('dict', developers) }}"


#
# install rust
#
- name: register if rust installed
  command: rustup --version
  register: rustup_version
  changed_when: False
  ignore_errors: True
- name: download Rust install script
  get_url:
    url: https://static.rust-lang.org/rustup.sh
    dest: /tmp/rustup.sh
    mode: +x
  when: rustup_version.rc != 0
- name: run Rust install script
  # each user needs to run this script
  become_user: "{{ item.key }}"
  shell: /tmp/rustup.sh -y
  loop: "{{ q('dict', developers) }}"
  when: rustup_version.rc != 0
- name: add cargo dir to users PATH
  lineinfile:
    path: ~{{ item.key }}/.profile
    line: 'PATH=$HOME/.cargo/bin:$PATH'
  loop: "{{ q('dict', developers) }}"
  when: rustup_version.rc != 0


#
# create directory structure
#
- name: create directory for projects
  file:
    path: ~{{ item.key }}/Projects
    state: directory
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
  loop: "{{ q('dict', developers) }}"
- name: create directory for project builds
  file:
    path: ~{{ item.key }}/Project_builds
    state: directory
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
  loop: "{{ q('dict', developers) }}"
- name: create Projects_builds linking script
  copy:
    src: link_to_Project_builds.sh
    dest: ~{{ item.key }}/.local/bin/link_to_Project_builds
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
    mode: +x
  loop: "{{ q('dict', developers) }}"
- name: remove old link_to_Projects_builds.sh file
  file:
    path: ~{{ item.key }}/.local/bin/link_to_Projects_builds.sh
    state: absent
  loop: "{{ q('dict', developers) }}"

#
# setup ssh agent
#
- name: create ssh dir
  become_user: "{{ item.key }}"
  ansible.builtin.file:
    path: ~/.ssh
    state: directory
  loop: "{{ q('dict', developers) }}"
- name: copy ssh config file
  copy:
    src: ssh_config
    dest: ~{{ item.key }}/.ssh/config
    mode: '600'
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
  loop: "{{ q('dict', developers) }}"
- name: copy ssh-agent systemd service
  copy:
    src: ssh-agent.service
    dest: ~{{ item.key }}/.config/systemd/user/ssh-agent.service
  loop: "{{ q('dict', developers) }}"
- name: add ssh-agent socket to users PATH
  lineinfile:
    path: ~{{ item.key }}/.zshrc
    line: 'export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/ssh-agent.socket"'
  loop: "{{ q('dict', developers) }}"
- name: start ssh agent service
  become_user: "{{ item.key }}"
  systemd:
    name: ssh-agent.service
    state: started
    enabled: yes
    scope: user
  loop: "{{ q('dict', developers) }}"
